{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "19ugKoors8xIEQNh9wzi9K35maBG3HR7_",
      "authorship_tag": "ABX9TyMntJCjN8ro74vynJK7Dhoq",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/venkyyy23/alumni/blob/main/Decision%20Tree\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "fd9jGpE1maen",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c4343512-5d6b-4bf2-96ba-df6f9d809e26"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (1.5.3)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.3.post1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.23.5)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas) (1.16.0)\n"
          ]
        }
      ],
      "source": [
        "pip install pandas"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GdOpiE_qde7U"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "SCMXrieheaQR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pip install seaborn"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_sG6-8KEdlmo",
        "outputId": "cf52b2fe-ba2a-49f2-fa09-3bc60276f864"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (0.12.2)\n",
            "Requirement already satisfied: numpy!=1.24.0,>=1.17 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.23.5)\n",
            "Requirement already satisfied: pandas>=0.25 in /usr/local/lib/python3.10/dist-packages (from seaborn) (1.5.3)\n",
            "Requirement already satisfied: matplotlib!=3.6.1,>=3.1 in /usr/local/lib/python3.10/dist-packages (from seaborn) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (4.44.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (23.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib!=3.6.1,>=3.1->seaborn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.25->seaborn) (2023.3.post1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib!=3.6.1,>=3.1->seaborn) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd"
      ],
      "metadata": {
        "id": "46XxN-VLdv1j"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing data\n",
        "\n",
        "df = pd.read_csv(\"/content/new.csv\")\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "9B1C7PfiefCR",
        "outputId": "835305cf-4a92-4d5c-be9e-f4dba4e38899"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Color     Type  Doors      Tires Class\n",
              "0     red      suv      2  whitewall   yes\n",
              "1    blue  minivan      4  whitewall    no\n",
              "2   green      car      4  whitewall    no\n",
              "3     red  minivan      4  blackwall    no\n",
              "4   green      car      2  blackwall   yes\n",
              "5   green      suv      4  blackwall    no\n",
              "6    blue      suv      2  blackwall    no\n",
              "7    blue      car      2  whitewall   yes\n",
              "8     red      suv      2  blackwall    no\n",
              "9    blue      car      4  blackwall    no\n",
              "10  green      suv      4  whitewall   yes\n",
              "11    red      car      2  blackwall   yes\n",
              "12  green      suv      2  blackwall    no\n",
              "13  green  minivan      4  whitewall    no"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8ebbf64d-ef00-44da-bd6f-ec0d2d4d8deb\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Color</th>\n",
              "      <th>Type</th>\n",
              "      <th>Doors</th>\n",
              "      <th>Tires</th>\n",
              "      <th>Class</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>red</td>\n",
              "      <td>suv</td>\n",
              "      <td>2</td>\n",
              "      <td>whitewall</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>blue</td>\n",
              "      <td>minivan</td>\n",
              "      <td>4</td>\n",
              "      <td>whitewall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>green</td>\n",
              "      <td>car</td>\n",
              "      <td>4</td>\n",
              "      <td>whitewall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>red</td>\n",
              "      <td>minivan</td>\n",
              "      <td>4</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>green</td>\n",
              "      <td>car</td>\n",
              "      <td>2</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>green</td>\n",
              "      <td>suv</td>\n",
              "      <td>4</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>blue</td>\n",
              "      <td>suv</td>\n",
              "      <td>2</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>blue</td>\n",
              "      <td>car</td>\n",
              "      <td>2</td>\n",
              "      <td>whitewall</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>red</td>\n",
              "      <td>suv</td>\n",
              "      <td>2</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>blue</td>\n",
              "      <td>car</td>\n",
              "      <td>4</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>green</td>\n",
              "      <td>suv</td>\n",
              "      <td>4</td>\n",
              "      <td>whitewall</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>red</td>\n",
              "      <td>car</td>\n",
              "      <td>2</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>green</td>\n",
              "      <td>suv</td>\n",
              "      <td>2</td>\n",
              "      <td>blackwall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>green</td>\n",
              "      <td>minivan</td>\n",
              "      <td>4</td>\n",
              "      <td>whitewall</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8ebbf64d-ef00-44da-bd6f-ec0d2d4d8deb')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8ebbf64d-ef00-44da-bd6f-ec0d2d4d8deb button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8ebbf64d-ef00-44da-bd6f-ec0d2d4d8deb');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8b19b8ea-ec38-49b0-8ffe-9bd2c6e5044d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8b19b8ea-ec38-49b0-8ffe-9bd2c6e5044d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8b19b8ea-ec38-49b0-8ffe-9bd2c6e5044d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ylJ383csfxED",
        "outputId": "c6cae7a5-c91d-40b6-ac8e-05eb418fc5ef"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Color    object\n",
              "Type     object\n",
              "Doors     int64\n",
              "Tires    object\n",
              "Class    object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tMF86f6uf18P",
        "outputId": "4e0048c8-080c-4427-86a8-fd96f0b6fb03"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 14 entries, 0 to 13\n",
            "Data columns (total 5 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   Color   14 non-null     object\n",
            " 1   Type    14 non-null     object\n",
            " 2   Doors   14 non-null     int64 \n",
            " 3   Tires   14 non-null     object\n",
            " 4   Class   14 non-null     object\n",
            "dtypes: int64(1), object(4)\n",
            "memory usage: 688.0+ bytes\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "t = df.keys()[-1]\n",
        "print('Target Attribute is   ➡ ', t)\n",
        "\n",
        "# Get the attribute names from input dataset\n",
        "attribute_names = list(df.keys())\n",
        "\n",
        "#Remove the target attribute from the attribute names list\n",
        "attribute_names.remove(t)\n",
        "\n",
        "print('Predicting Attributes ➡ ', attribute_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "USKtfSfTf5JM",
        "outputId": "ba9fb22b-ea3f-4550-a9b0-9cf33ebe884d"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Target Attribute is   ➡  Class\n",
            "Predicting Attributes ➡  ['Color', 'Type', 'Doors', 'Tires']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "def entropy(probs):\n",
        "    return sum( [-prob*math.log(prob, 2) for prob in probs])\n",
        "\n",
        "#Function to calulate the entropy of the given Datasets/List with respect to target attributes\n",
        "def entropy_of_list(ls,value):\n",
        "    from collections import Counter\n",
        "\n",
        "    # Total intances associated with respective attribute\n",
        "    total_instances = len(ls)  # = 14\n",
        "    print(\"---------------------------------------------------------\")\n",
        "    print(\"\\nTotal no of instances/records associated with '{0}' is ➡ {1}\".format(value,total_instances))\n",
        "    # Counter calculates the propotion of class\n",
        "    cnt = Counter(x for x in ls)\n",
        "    print('\\nTarget attribute class count(Yes/No)=',dict(cnt))\n",
        "\n",
        "    # x means no of YES/NO\n",
        "    probs = [x / total_instances for x in cnt.values()]\n",
        "    print(\"\\nClasses➡\", max(cnt), min(cnt))\n",
        "    print(\"\\nProbabilities of Class 'p'='{0}' ➡ {1}\".format(max(cnt),max(probs)))\n",
        "    print(\"Probabilities of Class 'n'='{0}'  ➡ {1}\".format(min(cnt),min(probs)))\n",
        "\n",
        "    # Call Entropy\n",
        "    return entropy(probs)"
      ],
      "metadata": {
        "id": "6wDp7Ghag0z9"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def information_gain(df, split_attribute, target_attribute,battr):\n",
        "    print(\"\\n\\n----- Information Gain Calculation of\",split_attribute,\"----- \")\n",
        "\n",
        "    # group the data based on attribute values\n",
        "    df_split = df.groupby(split_attribute)\n",
        "    glist=[]\n",
        "    for gname,group in df_split:\n",
        "        print('Grouped Attribute Values \\n',group)\n",
        "        print(\"---------------------------------------------------------\")\n",
        "        glist.append(gname)\n",
        "\n",
        "    glist.reverse()\n",
        "    nobs = len(df.index) * 1.0\n",
        "    df_agg1=df_split.agg({target_attribute:lambda x:entropy_of_list(x, glist.pop())})\n",
        "    df_agg2=df_split.agg({target_attribute :lambda x:len(x)/nobs})\n",
        "\n",
        "    df_agg1.columns=['Entropy']\n",
        "    df_agg2.columns=['Proportion']\n",
        "\n",
        "    # Calculate Information Gain:\n",
        "    new_entropy = sum( df_agg1['Entropy'] * df_agg2['Proportion'])\n",
        "    if battr !='S':\n",
        "        old_entropy = entropy_of_list(df[target_attribute],'S-'+df.iloc[0][df.columns.get_loc(battr)])\n",
        "    else:\n",
        "        old_entropy = entropy_of_list(df[target_attribute],battr)\n",
        "    return old_entropy - new_entropy"
      ],
      "metadata": {
        "id": "FO_qxeMzg63r"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def id3(df, target_attribute, attribute_names, default_class=None,default_attr='S'):\n",
        "\n",
        "    from collections import Counter\n",
        "    cnt = Counter(x for x in df[target_attribute])# class of YES /NO\n",
        "\n",
        "    ## First check: Is this split of the dataset homogeneous?\n",
        "    if len(cnt) == 1:\n",
        "        return next(iter(cnt))  # next input data set, or raises StopIteration when EOF is hit.\n",
        "\n",
        "    ## Second check: Is this split of the dataset empty? if yes, return a default value\n",
        "    elif df.empty or (not attribute_names):\n",
        "        return default_class  # Return None for Empty Data Set\n",
        "\n",
        "    ## Otherwise: This dataset is ready to be devied up!\n",
        "    else:\n",
        "        # Get Default Value for next recursive call of this function:\n",
        "        default_class = max(cnt.keys()) #No of YES and NO Class\n",
        "        # Compute the Information Gain of the attributes:\n",
        "        gainz=[]\n",
        "        for attr in attribute_names:\n",
        "            ig= information_gain(df, attr, target_attribute,default_attr)\n",
        "            gainz.append(ig)\n",
        "            print('\\nInformation gain of','“',attr,'”','is ➡', ig)\n",
        "            print(\"=========================================================\")\n",
        "\n",
        "        index_of_max = gainz.index(max(gainz))               # Index of Best Attribute\n",
        "        best_attr = attribute_names[index_of_max]            # Choose Best Attribute to split on\n",
        "        print(\"\\nList of Gain for arrtibutes:\",attribute_names,\"\\nare:\", gainz,\"respectively.\")\n",
        "        print(\"\\nAttribute with the maximum gain is ➡\", best_attr)\n",
        "        print(\"\\nHence, the Root node will be ➡\", best_attr)\n",
        "        print(\"=========================================================\")\n",
        "\n",
        "        # Create an empty tree, to be populated in a moment\n",
        "        tree = {best_attr:{}} # Initiate the tree with best attribute as a node\n",
        "        remaining_attribute_names =[i for i in attribute_names if i != best_attr]\n",
        "\n",
        "        # Split dataset-On each split, recursively call this algorithm.Populate the empty tree with subtrees, which\n",
        "        # are the result of the recursive call\n",
        "        for attr_val, data_subset in df.groupby(best_attr):\n",
        "            subtree = id3(data_subset,target_attribute, remaining_attribute_names,default_class,best_attr)\n",
        "            tree[best_attr][attr_val] = subtree\n",
        "        return tree"
      ],
      "metadata": {
        "id": "0z7nYfvMg_30"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def entropy_dataset(a_list):\n",
        "    from collections import Counter\n",
        "\n",
        "    # Counter calculates the propotion of class\n",
        "    cnt = Counter(x for x in a_list)\n",
        "    num_instances = len(a_list)*1.0    # = 14\n",
        "    print(\"\\nNumber of Instances of the Current Sub-Class is {0}\".format(num_instances ))\n",
        "\n",
        "    # x means no of YES/NO\n",
        "    probs = [x / num_instances for x in cnt.values()]\n",
        "    print(\"\\nClasses➡\", \"'p'=\",max(cnt), \"'n'=\",min(cnt))\n",
        "    print(\"\\nProbabilities of Class 'p'='{0}' ➡ {1}\".format(max(cnt),max(probs)))\n",
        "    print(\"Probabilities of Class 'n'='{0}'  ➡ {1}\".format(min(cnt),min(probs)))\n",
        "\n",
        "    # Call Entropy\n",
        "    return entropy(probs)\n",
        "\n",
        "# The initial entropy of the YES/NO attribute for our dataset.\n",
        "print(\"Entropy calculation for input dataset:\\n\")\n",
        "print(df['Class'])\n",
        "\n",
        "total_entropy = entropy_dataset(df['Class'])\n",
        "print(\"\\nTotal Entropy(S) of PlayGolf Dataset➡\", total_entropy)\n",
        "print(\"=========================================================\")\n",
        "####################################################\n",
        "\n",
        "from pprint import pprint\n",
        "tree = id3(df,t,attribute_names)\n",
        "print(\"\\nThe Resultant Decision Tree is: ⤵\\n\")\n",
        "pprint(tree)\n",
        "\n",
        "attribute = next(iter(tree))\n",
        "print(\"\\nBest Attribute ➡\",attribute)\n",
        "print(\"Tree Keys      ➡\",tree[attribute].keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CN0TFEVhhKch",
        "outputId": "c381808a-7fa6-4528-aec0-880a2745ab0e"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Entropy calculation for input dataset:\n",
            "\n",
            "0     yes\n",
            "1      no\n",
            "2      no\n",
            "3      no\n",
            "4     yes\n",
            "5      no\n",
            "6      no\n",
            "7     yes\n",
            "8      no\n",
            "9      no\n",
            "10    yes\n",
            "11    yes\n",
            "12     no\n",
            "13     no\n",
            "Name: Class, dtype: object\n",
            "\n",
            "Number of Instances of the Current Sub-Class is 14.0\n",
            "\n",
            "Classes➡ 'p'= yes 'n'= no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6428571428571429\n",
            "Probabilities of Class 'n'='no'  ➡ 0.35714285714285715\n",
            "\n",
            "Total Entropy(S) of PlayGolf Dataset➡ 0.9402859586706309\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Color ----- \n",
            "Grouped Attribute Values \n",
            "   Color     Type  Doors      Tires Class\n",
            "1  blue  minivan      4  whitewall    no\n",
            "6  blue      suv      2  blackwall    no\n",
            "7  blue      car      2  whitewall   yes\n",
            "9  blue      car      4  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color     Type  Doors      Tires Class\n",
            "2   green      car      4  whitewall    no\n",
            "4   green      car      2  blackwall   yes\n",
            "5   green      suv      4  blackwall    no\n",
            "10  green      suv      4  whitewall   yes\n",
            "12  green      suv      2  blackwall    no\n",
            "13  green  minivan      4  whitewall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "    Color     Type  Doors      Tires Class\n",
            "0    red      suv      2  whitewall   yes\n",
            "3    red  minivan      4  blackwall    no\n",
            "8    red      suv      2  blackwall    no\n",
            "11   red      car      2  blackwall   yes\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'blue' is ➡ 4\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 3, 'yes': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.75\n",
            "Probabilities of Class 'n'='no'  ➡ 0.25\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'green' is ➡ 6\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 4, 'yes': 2}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'red' is ➡ 4\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2, 'no': 2}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S' is ➡ 14\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 5, 'no': 9}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6428571428571429\n",
            "Probabilities of Class 'n'='no'  ➡ 0.35714285714285715\n",
            "\n",
            "Information gain of “ Color ” is ➡ 0.029222565658954647\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Type ----- \n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "2   green  car      4  whitewall    no\n",
            "4   green  car      2  blackwall   yes\n",
            "7    blue  car      2  whitewall   yes\n",
            "9    blue  car      4  blackwall    no\n",
            "11    red  car      2  blackwall   yes\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color     Type  Doors      Tires Class\n",
            "1    blue  minivan      4  whitewall    no\n",
            "3     red  minivan      4  blackwall    no\n",
            "13  green  minivan      4  whitewall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "0     red  suv      2  whitewall   yes\n",
            "5   green  suv      4  blackwall    no\n",
            "6    blue  suv      2  blackwall    no\n",
            "8     red  suv      2  blackwall    no\n",
            "10  green  suv      4  whitewall   yes\n",
            "12  green  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'car' is ➡ 5\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 2, 'yes': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6\n",
            "Probabilities of Class 'n'='no'  ➡ 0.4\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'minivan' is ➡ 3\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 3}\n",
            "\n",
            "Classes➡ no no\n",
            "\n",
            "Probabilities of Class 'p'='no' ➡ 1.0\n",
            "Probabilities of Class 'n'='no'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'suv' is ➡ 6\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2, 'no': 4}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S' is ➡ 14\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 5, 'no': 9}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6428571428571429\n",
            "Probabilities of Class 'n'='no'  ➡ 0.35714285714285715\n",
            "\n",
            "Information gain of “ Type ” is ➡ 0.19996253177061096\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Doors ----- \n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "0     red  suv      2  whitewall   yes\n",
            "4   green  car      2  blackwall   yes\n",
            "6    blue  suv      2  blackwall    no\n",
            "7    blue  car      2  whitewall   yes\n",
            "8     red  suv      2  blackwall    no\n",
            "11    red  car      2  blackwall   yes\n",
            "12  green  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color     Type  Doors      Tires Class\n",
            "1    blue  minivan      4  whitewall    no\n",
            "2   green      car      4  whitewall    no\n",
            "3     red  minivan      4  blackwall    no\n",
            "5   green      suv      4  blackwall    no\n",
            "9    blue      car      4  blackwall    no\n",
            "10  green      suv      4  whitewall   yes\n",
            "13  green  minivan      4  whitewall    no\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with '2' is ➡ 7\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 4, 'no': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5714285714285714\n",
            "Probabilities of Class 'n'='no'  ➡ 0.42857142857142855\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with '4' is ➡ 7\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 6, 'yes': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.8571428571428571\n",
            "Probabilities of Class 'n'='no'  ➡ 0.14285714285714285\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S' is ➡ 14\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 5, 'no': 9}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6428571428571429\n",
            "Probabilities of Class 'n'='no'  ➡ 0.35714285714285715\n",
            "\n",
            "Information gain of “ Doors ” is ➡ 0.15183550136234136\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Tires ----- \n",
            "Grouped Attribute Values \n",
            "     Color     Type  Doors      Tires Class\n",
            "3     red  minivan      4  blackwall    no\n",
            "4   green      car      2  blackwall   yes\n",
            "5   green      suv      4  blackwall    no\n",
            "6    blue      suv      2  blackwall    no\n",
            "8     red      suv      2  blackwall    no\n",
            "9    blue      car      4  blackwall    no\n",
            "11    red      car      2  blackwall   yes\n",
            "12  green      suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color     Type  Doors      Tires Class\n",
            "0     red      suv      2  whitewall   yes\n",
            "1    blue  minivan      4  whitewall    no\n",
            "2   green      car      4  whitewall    no\n",
            "7    blue      car      2  whitewall   yes\n",
            "10  green      suv      4  whitewall   yes\n",
            "13  green  minivan      4  whitewall    no\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'blackwall' is ➡ 8\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 6, 'yes': 2}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.75\n",
            "Probabilities of Class 'n'='no'  ➡ 0.25\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'whitewall' is ➡ 6\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 3, 'no': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S' is ➡ 14\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 5, 'no': 9}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6428571428571429\n",
            "Probabilities of Class 'n'='no'  ➡ 0.35714285714285715\n",
            "\n",
            "Information gain of “ Tires ” is ➡ 0.04812703040826927\n",
            "=========================================================\n",
            "\n",
            "List of Gain for arrtibutes: ['Color', 'Type', 'Doors', 'Tires'] \n",
            "are: [0.029222565658954647, 0.19996253177061096, 0.15183550136234136, 0.04812703040826927] respectively.\n",
            "\n",
            "Attribute with the maximum gain is ➡ Type\n",
            "\n",
            "Hence, the Root node will be ➡ Type\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Color ----- \n",
            "Grouped Attribute Values \n",
            "   Color Type  Doors      Tires Class\n",
            "7  blue  car      2  whitewall   yes\n",
            "9  blue  car      4  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "    Color Type  Doors      Tires Class\n",
            "2  green  car      4  whitewall    no\n",
            "4  green  car      2  blackwall   yes\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "    Color Type  Doors      Tires Class\n",
            "11   red  car      2  blackwall   yes\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'blue' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 1, 'no': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'green' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 1, 'yes': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'red' is ➡ 1\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 1}\n",
            "\n",
            "Classes➡ yes yes\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 1.0\n",
            "Probabilities of Class 'n'='yes'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S-car' is ➡ 5\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 2, 'yes': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6\n",
            "Probabilities of Class 'n'='no'  ➡ 0.4\n",
            "\n",
            "Information gain of “ Color ” is ➡ 0.17095059445466854\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Doors ----- \n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "4   green  car      2  blackwall   yes\n",
            "7    blue  car      2  whitewall   yes\n",
            "11    red  car      2  blackwall   yes\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "    Color Type  Doors      Tires Class\n",
            "2  green  car      4  whitewall    no\n",
            "9   blue  car      4  blackwall    no\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with '2' is ➡ 3\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 3}\n",
            "\n",
            "Classes➡ yes yes\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 1.0\n",
            "Probabilities of Class 'n'='yes'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with '4' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 2}\n",
            "\n",
            "Classes➡ no no\n",
            "\n",
            "Probabilities of Class 'p'='no' ➡ 1.0\n",
            "Probabilities of Class 'n'='no'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S-car' is ➡ 5\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 2, 'yes': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6\n",
            "Probabilities of Class 'n'='no'  ➡ 0.4\n",
            "\n",
            "Information gain of “ Doors ” is ➡ 0.9709505944546686\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Tires ----- \n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "4   green  car      2  blackwall   yes\n",
            "9    blue  car      4  blackwall    no\n",
            "11    red  car      2  blackwall   yes\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "    Color Type  Doors      Tires Class\n",
            "2  green  car      4  whitewall    no\n",
            "7   blue  car      2  whitewall   yes\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'blackwall' is ➡ 3\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2, 'no': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'whitewall' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 1, 'yes': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S-car' is ➡ 5\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 2, 'yes': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6\n",
            "Probabilities of Class 'n'='no'  ➡ 0.4\n",
            "\n",
            "Information gain of “ Tires ” is ➡ 0.01997309402197489\n",
            "=========================================================\n",
            "\n",
            "List of Gain for arrtibutes: ['Color', 'Doors', 'Tires'] \n",
            "are: [0.17095059445466854, 0.9709505944546686, 0.01997309402197489] respectively.\n",
            "\n",
            "Attribute with the maximum gain is ➡ Doors\n",
            "\n",
            "Hence, the Root node will be ➡ Doors\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Color ----- \n",
            "Grouped Attribute Values \n",
            "   Color Type  Doors      Tires Class\n",
            "6  blue  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "5   green  suv      4  blackwall    no\n",
            "10  green  suv      4  whitewall   yes\n",
            "12  green  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "   Color Type  Doors      Tires Class\n",
            "0   red  suv      2  whitewall   yes\n",
            "8   red  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'blue' is ➡ 1\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 1}\n",
            "\n",
            "Classes➡ no no\n",
            "\n",
            "Probabilities of Class 'p'='no' ➡ 1.0\n",
            "Probabilities of Class 'n'='no'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'green' is ➡ 3\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 2, 'yes': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'red' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 1, 'no': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S-suv' is ➡ 6\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2, 'no': 4}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "\n",
            "Information gain of “ Color ” is ➡ 0.12581458369391152\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Doors ----- \n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "0     red  suv      2  whitewall   yes\n",
            "6    blue  suv      2  blackwall    no\n",
            "8     red  suv      2  blackwall    no\n",
            "12  green  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "5   green  suv      4  blackwall    no\n",
            "10  green  suv      4  whitewall   yes\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with '2' is ➡ 4\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 1, 'no': 3}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.75\n",
            "Probabilities of Class 'n'='no'  ➡ 0.25\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with '4' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 1, 'yes': 1}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.5\n",
            "Probabilities of Class 'n'='no'  ➡ 0.5\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S-suv' is ➡ 6\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2, 'no': 4}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "\n",
            "Information gain of “ Doors ” is ➡ 0.044110417748401076\n",
            "=========================================================\n",
            "\n",
            "\n",
            "----- Information Gain Calculation of Tires ----- \n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "5   green  suv      4  blackwall    no\n",
            "6    blue  suv      2  blackwall    no\n",
            "8     red  suv      2  blackwall    no\n",
            "12  green  suv      2  blackwall    no\n",
            "---------------------------------------------------------\n",
            "Grouped Attribute Values \n",
            "     Color Type  Doors      Tires Class\n",
            "0     red  suv      2  whitewall   yes\n",
            "10  green  suv      4  whitewall   yes\n",
            "---------------------------------------------------------\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'blackwall' is ➡ 4\n",
            "\n",
            "Target attribute class count(Yes/No)= {'no': 4}\n",
            "\n",
            "Classes➡ no no\n",
            "\n",
            "Probabilities of Class 'p'='no' ➡ 1.0\n",
            "Probabilities of Class 'n'='no'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'whitewall' is ➡ 2\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2}\n",
            "\n",
            "Classes➡ yes yes\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 1.0\n",
            "Probabilities of Class 'n'='yes'  ➡ 1.0\n",
            "---------------------------------------------------------\n",
            "\n",
            "Total no of instances/records associated with 'S-suv' is ➡ 6\n",
            "\n",
            "Target attribute class count(Yes/No)= {'yes': 2, 'no': 4}\n",
            "\n",
            "Classes➡ yes no\n",
            "\n",
            "Probabilities of Class 'p'='yes' ➡ 0.6666666666666666\n",
            "Probabilities of Class 'n'='no'  ➡ 0.3333333333333333\n",
            "\n",
            "Information gain of “ Tires ” is ➡ 0.9182958340544896\n",
            "=========================================================\n",
            "\n",
            "List of Gain for arrtibutes: ['Color', 'Doors', 'Tires'] \n",
            "are: [0.12581458369391152, 0.044110417748401076, 0.9182958340544896] respectively.\n",
            "\n",
            "Attribute with the maximum gain is ➡ Tires\n",
            "\n",
            "Hence, the Root node will be ➡ Tires\n",
            "=========================================================\n",
            "\n",
            "The Resultant Decision Tree is: ⤵\n",
            "\n",
            "{'Type': {'car': {'Doors': {2: 'yes', 4: 'no'}},\n",
            "          'minivan': 'no',\n",
            "          'suv': {'Tires': {'blackwall': 'no', 'whitewall': 'yes'}}}}\n",
            "\n",
            "Best Attribute ➡ Type\n",
            "Tree Keys      ➡ dict_keys(['car', 'minivan', 'suv'])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def classify(instance, tree,default=None):  # Instance of Play Tennis with Predicted\n",
        "    attribute = next(iter(tree))            # Outlook/Humidity/Wind\n",
        "    if instance[attribute] in tree[attribute].keys(): # Value of the attributs in  set of Tree keys\n",
        "        result = tree[attribute][instance[attribute]]\n",
        "        if isinstance(result, dict):                  # this is a tree, delve deeper\n",
        "            return classify(instance, result)\n",
        "        else:\n",
        "            return result # this is a label\n",
        "    else:\n",
        "        return default\n",
        "\n",
        "df_new=pd.read_csv('/content/new.csv')\n",
        "df_new['Predicted'] = df_new.apply(classify, axis=1, args=(tree,'?'))\n",
        "print(df_new)"
      ],
      "metadata": {
        "id": "gjHHuUjChnG-",
        "outputId": "db650750-12c3-4024-8288-ffcdeda66721",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    Color     Type  Doors      Tires Class Predicted\n",
            "0     red      suv      2  whitewall   yes       yes\n",
            "1    blue  minivan      4  whitewall    no        no\n",
            "2   green      car      4  whitewall    no        no\n",
            "3     red  minivan      4  blackwall    no        no\n",
            "4   green      car      2  blackwall   yes       yes\n",
            "5   green      suv      4  blackwall    no        no\n",
            "6    blue      suv      2  blackwall    no        no\n",
            "7    blue      car      2  whitewall   yes       yes\n",
            "8     red      suv      2  blackwall    no        no\n",
            "9    blue      car      4  blackwall    no        no\n",
            "10  green      suv      4  whitewall   yes       yes\n",
            "11    red      car      2  blackwall   yes       yes\n",
            "12  green      suv      2  blackwall    no        no\n",
            "13  green  minivan      4  whitewall    no        no\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting categorical variables into dummies/indicator variables\n",
        "\n",
        "df_getdummy=pd.get_dummies(data=df, columns=['Color', 'Type', 'Doors', 'Tires'])\n",
        "df_getdummy"
      ],
      "metadata": {
        "id": "mUb6QvKiiFwu",
        "outputId": "8494268b-5e7c-435c-bf1a-bfc344abb904",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Class  Color_blue  Color_green  Color_red  Type_car  Type_minivan  \\\n",
              "0    yes           0            0          1         0             0   \n",
              "1     no           1            0          0         0             1   \n",
              "2     no           0            1          0         1             0   \n",
              "3     no           0            0          1         0             1   \n",
              "4    yes           0            1          0         1             0   \n",
              "5     no           0            1          0         0             0   \n",
              "6     no           1            0          0         0             0   \n",
              "7    yes           1            0          0         1             0   \n",
              "8     no           0            0          1         0             0   \n",
              "9     no           1            0          0         1             0   \n",
              "10   yes           0            1          0         0             0   \n",
              "11   yes           0            0          1         1             0   \n",
              "12    no           0            1          0         0             0   \n",
              "13    no           0            1          0         0             1   \n",
              "\n",
              "    Type_suv  Doors_2  Doors_4  Tires_blackwall  Tires_whitewall  \n",
              "0          1        1        0                0                1  \n",
              "1          0        0        1                0                1  \n",
              "2          0        0        1                0                1  \n",
              "3          0        0        1                1                0  \n",
              "4          0        1        0                1                0  \n",
              "5          1        0        1                1                0  \n",
              "6          1        1        0                1                0  \n",
              "7          0        1        0                0                1  \n",
              "8          1        1        0                1                0  \n",
              "9          0        0        1                1                0  \n",
              "10         1        0        1                0                1  \n",
              "11         0        1        0                1                0  \n",
              "12         1        1        0                1                0  \n",
              "13         0        0        1                0                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5922b4aa-e0c8-4676-bac7-e59074a59394\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Class</th>\n",
              "      <th>Color_blue</th>\n",
              "      <th>Color_green</th>\n",
              "      <th>Color_red</th>\n",
              "      <th>Type_car</th>\n",
              "      <th>Type_minivan</th>\n",
              "      <th>Type_suv</th>\n",
              "      <th>Doors_2</th>\n",
              "      <th>Doors_4</th>\n",
              "      <th>Tires_blackwall</th>\n",
              "      <th>Tires_whitewall</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>yes</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>yes</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>yes</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>yes</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>yes</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>no</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5922b4aa-e0c8-4676-bac7-e59074a59394')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5922b4aa-e0c8-4676-bac7-e59074a59394 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5922b4aa-e0c8-4676-bac7-e59074a59394');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9b24c956-b9ac-4bb0-ba0d-fba72a4d2fc6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b24c956-b9ac-4bb0-ba0d-fba72a4d2fc6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9b24c956-b9ac-4bb0-ba0d-fba72a4d2fc6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pip install sklearn"
      ],
      "metadata": {
        "id": "NcNzdWWrivPq",
        "outputId": "f93791b5-915a-46e7-9c94-1a5393b5bd88",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting sklearn\n",
            "  Using cached sklearn-0.0.post11.tar.gz (3.6 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Building wheels for collected packages: sklearn\n",
            "  Building wheel for sklearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for sklearn: filename=sklearn-0.0.post11-py3-none-any.whl size=2959 sha256=e767333832d844b1ea8ca964ee49bae162433a8213c35cdd67efb80beffd9bd4\n",
            "  Stored in directory: /root/.cache/pip/wheels/aa/9c/60/f67813603a52fc35057868f1aba0003cc75b72583dcaa2c341\n",
            "Successfully built sklearn\n",
            "Installing collected packages: sklearn\n",
            "Successfully installed sklearn-0.0.post11\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Separating the training set and test set\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X = df_getdummy.drop('Class',axis=1)\n",
        "y = df_getdummy['Class']\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)"
      ],
      "metadata": {
        "id": "Xj06zZYOi1vE"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# importing Decision Tree Classifier via sklean\n",
        "\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "dtree = DecisionTreeClassifier(criterion='entropy',max_depth=2)\n",
        "dtree.fit(X_train,y_train)\n",
        "predictions = dtree.predict(X_test)"
      ],
      "metadata": {
        "id": "nf-Nsvpmi5DU"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import plot_tree\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "fig = plt.figure(figsize=(16,12))\n",
        "a = plot_tree(dtree, feature_names=df_getdummy.columns, fontsize=12, filled=True,\n",
        "              class_names=['+', '-'])"
      ],
      "metadata": {
        "id": "v-ifmkfAjBuh",
        "outputId": "33313bc4-a3b4-4ef5-f769-e87fa9dd63fd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 851
        }
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x1200 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}